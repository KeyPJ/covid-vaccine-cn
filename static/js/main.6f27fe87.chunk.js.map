{"version":3,"sources":["App.tsx","hooks/useWinSize.ts","reportWebVitals.ts","index.tsx"],"names":["App","useState","xData","ySumData","yIncrementData","ySumMax","yIncrementMax","urls","data","setData","ySumInterval","option","title","text","subtext","sublink","left","top","textStyle","fontWeight","fontSize","tooltip","trigger","axisPointer","type","crossStyle","color","toolbox","feature","dataView","show","readOnly","magicType","saveAsImage","legend","xAxis","yAxis","name","min","max","interval","axisLabel","formatter","series","smooth","markPoint","yAxisIndex","dataZoom","start","end","useEffect","fetch","Date","getTime","then","res","json","map","a","date","href","count","slice","concat","value","index","toFixed","Math","floor","winSize","width","document","documentElement","clientWidth","height","clientHeight","size","setSize","onResize","useCallback","window","addEventListener","removeEventListener","useWinSize","onEvents","params","dataIndex","url","open","className","opts","renderer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6f27fe87.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport ReactECharts from 'echarts-for-react';\nimport {Data, DayData} from \"./@type/data\";\nimport {useWinSize} from \"./hooks/useWinSize\";\n\nfunction App() {\n\n    const [data, setData] = useState<Data>({\n        xData: [],\n        ySumData: [],\n        yIncrementData: [],\n        ySumMax: 0,\n        yIncrementMax: 0,\n        urls:[],\n    })\n\n    const ySumInterval = 30000;\n    const yIncrementInterval = 500;\n\n    const option = {\n        title: [{\n            text: '新冠病毒疫苗接种情况',\n            subtext: \"数据来自国家卫健委\\n注:数据日期为发布日期,数据实际为截至前一日的数据\\n.双击数据可以打开卫健委对应的发布页.\",\n            sublink: \"http://www.nhc.gov.cn/xcs/yqjzqk/list_gzbd.shtml\",\n            left: 'center',\n            top: 0,\n            textStyle: {\n                fontWeight: 'normal',\n                fontSize: 20\n            }\n        }],\n        tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n                type: 'cross',\n                crossStyle: {\n                    color: '#999'\n                }\n            }\n        },\n        toolbox: {\n            feature: {\n                dataView: {show: true, readOnly: false},\n                magicType: {show: true, type: ['line', 'bar']},\n                saveAsImage: {show: true}\n            }\n        },\n        legend: {\n            data: ['累计剂次(万)', '每日增量(万)'],\n            top: \"20%\"\n        },\n        xAxis: [\n            {\n                type: 'category',\n                data: data.xData,\n                axisPointer: {\n                    type: 'shadow'\n                }\n            }\n        ],\n        yAxis: [\n            {\n                type: 'value',\n                name: '累计剂次(万)',\n                min: 0,\n                max: data.ySumMax,\n                interval: ySumInterval,\n                axisLabel: {\n                    formatter: '{value}'\n                }\n            },\n            {\n                type: 'value',\n                name: '每日增量(万)',\n                min: 0,\n                max: data.yIncrementMax,\n                interval: yIncrementInterval,\n                axisLabel: {\n                    formatter: '{value}'\n                }\n            }\n        ],\n        series: [\n            {\n                name: '累计剂次',\n                type: 'line',\n                data: data.ySumData,\n                color: ['#4682B4'],\n                smooth: true,\n                markPoint:{\n                    data:[\n                        {name:\"最大值\",type:\"max\"}\n                    ]\n                },\n            },\n            {\n                name: '每日增量',\n                type: 'line',\n                yAxisIndex: 1,\n                data: data.yIncrementData,\n                color: ['#D2691E'],\n                smooth: true,\n                markPoint:{\n                    data:[\n                        {name:\"最大值\",type:\"max\"}\n                    ]\n                },\n            }\n        ],\n        dataZoom: [\n            {\n                type: 'slider',\n                start: 0,\n                end: 100,\n            }\n        ]\n    };\n\n\n    useEffect(() => {\n        fetch('data.json?'+new Date().getTime()).then(\n            res => {\n                res.json().then(\n                    (json: DayData[]) => {\n                        const xData: string[] = json.map(a => a.date);\n                        const urls: string[] = json.map(a => a.href);\n                        const ySumData = json.map(a => +a.count);\n                        const yIncrementData = ySumData.slice(0, 1).concat(ySumData.slice(0, -1)).map(\n                            (value, index) => +(ySumData[index] - value).toFixed(1)\n                        );\n                        const ySumMax = Math.floor(Math.max(...ySumData) / ySumInterval + 1) * ySumInterval;\n                        const yIncrementMax = Math.floor(Math.max(...yIncrementData) / yIncrementInterval + 1) * yIncrementInterval;\n                        setData({\n                            xData,\n                            ySumData,\n                            yIncrementData,\n                            ySumMax,\n                            yIncrementMax,\n                            urls\n                        })\n                    }\n                )\n            }\n        )\n    }, [])\n\n    const winSize = useWinSize();\n    const {width, height} = winSize;\n\n    const dblclick = (params: any) => {\n        const {dataIndex} = params;\n        const url = data.urls[dataIndex];\n        window.open(url, \"_blank\")\n    };\n\n    const onEvents = {\n        'dblclick': dblclick\n    }\n\n    return (\n        <div className=\"App main\">\n            <ReactECharts\n                option={option}\n                opts={{\n                    renderer: 'svg',\n                    width: width-50,\n                    height: height-50\n                }}\n                onEvents={onEvents}\n            />\n        </div>\n\n    );\n}\n\nexport default App;\n","import {useCallback, useEffect, useState} from \"react\";\n\nexport const useWinSize = () => {\n    const [size, setSize] = useState({\n        width: document.documentElement.clientWidth,\n        height: document.documentElement.clientHeight\n    })\n\n    const onResize = useCallback(() => {\n        setSize({\n            width: document.documentElement.clientWidth,\n            height: document.documentElement.clientHeight\n        })\n    }, [])\n    useEffect(() => {\n        window.addEventListener('resize', onResize)\n        return () => {\n            window.removeEventListener('resize', onResize)\n        }\n    }, [onResize])\n\n    return size;\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}